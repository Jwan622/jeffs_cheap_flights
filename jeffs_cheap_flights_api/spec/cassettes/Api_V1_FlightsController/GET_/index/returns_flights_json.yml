---
http_interactions:
- request:
    method: get
    uri: https://serpapi.com/search?api_key=75bd7fadd79341fdcfb11a8561988531ba35718f878d94bb4c08a4aa5897f2df&arrival_id=MAD&currency=USD&departure_id=JFK&engine=google_flights&hl=en&outbound_date=2024-04-01&output=json&q=&return_date=2024-04-24&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 29 Feb 2024 22:36:36 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 85d463196dbd729f-EWR
      Cf-Cache-Status:
      - HIT
      Age:
      - '1795'
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"e22cba4b8894d396d89fdfa9f25e20f7"
      Vary:
      - Accept-Encoding
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 65e0f345af6304cad9b0694a
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 3c1c5fab-9525-4a3b-98fc-4f0ff4005fb6
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '0.124359'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 29 Feb 2024 22:36:36 GMT
recorded_with: VCR 6.2.0
